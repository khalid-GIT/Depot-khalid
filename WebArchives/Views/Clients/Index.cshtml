@model WebArchives.Models.Clients.VMListeClient

@{
    //Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Index";
    ViewBag.titre = "Liste des clients";
    //ActivationContext de validation
    //HtmlHelper.ClientValidationEnabled = false;
    //HtmlHelper.UnobtrusiveJavaScriptEnabled = false;

}
@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>*@

<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs/dt-1.10.20/cr-1.5.2/datatables.min.css" />
@*Icons plus font*@
@Styles.Render("~/Content/fontawesome-free/css")
@*<link href="~/Content/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">*@

@Styles.Render("~/datatable/buttons/css")

<link href="@Url.Content("~/Content/jquery-ui.min.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/jquery-ui.css")" rel="stylesheet" type="text/css" />
<link href="~/Scripts/SweetAlert/sweetalert.css" rel="stylesheet" type="text/css" />
<h2>Liste des clients</h2>
@TempData["SuccessMessage"]

@*<p>
            @Html.ActionLink("Create New", "Create")
    </p>*@
@*<a class="btn btn-success" style="margin:10px auto" onclick="@Url.Action("Create", "Clients")"><i class="fas fa-plus">Ajouter</i></a>*@
<a class="btn btn-success" style="margin:10px auto" onclick="AddClient()"><i class="fas fa-plus">Ajouter</i></a>
<table id="idTableClients" class="table table-bordered" cellspacing="0">
    <thead>

        <tr role="row">
            <th>
                @Html.DisplayNameFor(model => model.id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Nom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Adresse)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FamilleName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tbl_Ville_id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IDContact)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Mail)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.telephone1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gsm)
            </th>
            <th style="text-align: center">
                Action
            </th>
        </tr>
    </thead>


</table>
<div><a href="@Url.Action("Report","Clients",new { repotType="PDF"})">Exporter en PDF</a></div>
<div><a href="@Url.Action("Report",new { repotType="Word"})">Exporter en WORD</a></div>
<div><a href="@Url.Action("Report",new { repotType="Excel"})">Exporter en EXCEL</a></div>
<!-- Modal -->
@*MODEL ADD*@
<style>
    .modal {
        text-align: center;
        width: auto
    }

    .modal-dialog {
        display: inline-block;
        text-align: left;
        vertical-align: middle;
    }
</style>

@*Debut Add client*@
@*@using (Html.BeginForm(new { id = "addClientForm", name = "formAdd", role = "form" }))
    {*@
<form id="addClientForm">
    <div class="modal fade" id="addClientModal" role="dialog" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Ajouter un client</h4>
                </div>
                <div class="modal-body">
                    <div id="displayArea">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.Nom, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Nom, new { htmlAttributes = new { @class = "form-control", @id = "idNomClient" } })
                                    @* @Html.ValidationMessageFor(model => model.Nom, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Adresse, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Adresse, new { htmlAttributes = new { @class = "form-control", @id = "idAdresseClient" } })
                                    @*   @Html.ValidationMessageFor(model => model.Adresse, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Mail, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Mail, new { htmlAttributes = new { @class = "form-control", @id = "idMailClient" } })
                                    @*  @Html.ValidationMessageFor(model => model.Mail, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.telephone1, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.telephone1, new { htmlAttributes = new { @class = "form-control", @id = "idtelephone1Client" } })
                                    @*  @Html.ValidationMessageFor(model => model.telephone1, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.fax, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.fax, new { htmlAttributes = new { @class = "form-control", @id = "idFaxClient" } })
                                    @*  @Html.ValidationMessageFor(model => model.fax, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Tbl_Famille_Clt_Id, "Famille", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.Tbl_Famille_Clt_Id, new SelectList(Model.listeFamille, "IdFamille", "Libelle"), new { @class = "form-control", @id = "idIdFamilleClient" })
                                    @Html.ValidationMessageFor(model => model.Tbl_Famille_Clt_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Tbl_Ville_id, "Ville", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.Tbl_Ville_id, new SelectList(Model.listeVilles, "IdVille", "Libelle"), new { @class = "form-control", @id = "idIdVilleClient" })
                                    @Html.ValidationMessageFor(model => model.Tbl_Ville_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.IDContact, "Contact", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.IDContact, new SelectList(Model.ListeContact, "IDContact", "FullName"), new { @class = "form-control", @id = "idIDContactClient" })
                                    @Html.ValidationMessageFor(model => model.IDContact, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.idf, htmlAttributes: new { @class = "control-label col-md-2", @id = "ididfClient" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.idf, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.idf, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Cnss, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Cnss, new { htmlAttributes = new { @class = "form-control", @id = "idCnssClient" } })
                                    @Html.ValidationMessageFor(model => model.Cnss, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Ice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Ice, new { htmlAttributes = new { @class = "form-control", @id = "idIceClient" } })
                                    @Html.ValidationMessageFor(model => model.Ice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Gsm, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Gsm, new { htmlAttributes = new { @class = "form-control", @id = "idGsmClient" } })
                                    @Html.ValidationMessageFor(model => model.Gsm, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Teleph, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Teleph, new { htmlAttributes = new { @class = "form-control", @id = "idTelephClient" } })
                                    @Html.ValidationMessageFor(model => model.Teleph, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Create" class="btn btn-default" onclick="SaveAddClient()" />
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
@* }*@
@*FIN MODEL CREATE*@
@*Debut Edit client*@
@*@using (Html.BeginForm(new { id = "editClientForm", name="form0", role = "form" }))
    {*@

<form id="editClientForm">
    <div class="modal fade" id="editClientModal" role="dialog" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Modifier un client</h4>
                    @* @Html.LabelFor(model => model.id, new { htmlAttributes = new { @class = "form-control", @id = "idIdClientEdit" } })*@
                    @Html.EditorFor(model => model.id, new { htmlAttributes = new { type = "hidden", @id = "idIdClientEdit" } })
                </div>
                <div class="modal-body">
                    <div id="displayArea">
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.Nom, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Nom, new { htmlAttributes = new { @class = "form-control", @id = "idNomClientEdit", @name = "NomClientEdit", @required = "required" } })
                                    @Html.ValidationMessageFor(model => model.Nom, null, new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Adresse, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Adresse, new { htmlAttributes = new { @class = "form-control", @id = "idAdresseClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Adresse, null, new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Mail, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Mail, new { htmlAttributes = new { @class = "form-control", @id = "idMailClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Mail, null, new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.telephone1, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.telephone1, new { htmlAttributes = new { @class = "form-control", @id = "idtelephone1ClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.telephone1, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.fax, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.fax, new { htmlAttributes = new { @class = "form-control", @id = "idFaxClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.fax, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Tbl_Famille_Clt_Id, "Famille", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.Tbl_Famille_Clt_Id, new SelectList(Model.listeFamille, "IdFamille", "Libelle"), new { @class = "form-control", @id = "idIdFamilleClientEdit" })
                                    @Html.ValidationMessageFor(model => model.Tbl_Famille_Clt_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Tbl_Ville_id, "Ville", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.Tbl_Ville_id, new SelectList(Model.listeVilles, "IdVille", "Libelle"), new { @class = "form-control", @id = "idIdVilleClientEdit" })
                                    @Html.ValidationMessageFor(model => model.Tbl_Ville_id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.IDContact, "Contact", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.IDContact, new SelectList(Model.ListeContact, "IDContact", "FullName"), new { @class = "form-control", @id = "idIDContactClientEdit" })
                                    @Html.ValidationMessageFor(model => model.IDContact, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.idf, htmlAttributes: new { @class = "control-label col-md-2", @id = "ididfClientEdit" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.idf, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.idf, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Cnss, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Cnss, new { htmlAttributes = new { @class = "form-control", @id = "idCnssClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Cnss, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Ice, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Ice, new { htmlAttributes = new { @class = "form-control", @id = "idIceClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Ice, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Gsm, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Gsm, new { htmlAttributes = new { @class = "form-control", @id = "idGsmClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Gsm, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Teleph, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Teleph, new { htmlAttributes = new { @class = "form-control", @id = "idTelephClientEdit" } })
                                    @Html.ValidationMessageFor(model => model.Teleph, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Save" class="btn btn-default" onclick="SaveEditClients()" />

                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
@*}*@
@*Fin Edit client*@

@{
    <script src="@Url.Content("~/Scripts/jquery-ui.min.js")" type="text/javascript"></script>
    @Scripts.Render("~/datatable/buttons/js");
    <script src="~/Scripts/SweetAlert/sweetalert.min.js" type="text/javascript"></script>
    @Scripts.Render("~/bundles/home/js");
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/bs/dt-1.10.20/cr-1.5.2/datatables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/fixedcolumns/3.3.0/js/dataTables.fixedColumns.min.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    //Validation


    @*@Scripts.Render("~/bundles/Client/js")*@
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script>
        SetActions({
            Modify: "@Url.Action("Edit","Clients")",
            SaveGlobal: "@Url.Action("SaveGlobal","Fonds")",
            GetFonds: "@Url.Action("GetFonds","Fonds")",
            SaveFonds: "@Url.Action("SaveFonds","Fonds")",
            AddChoice: "@Url.Action("AddChoice","Fonds")",
            SearchFonds: "@Url.Action("SearchFonds","Fonds")"
        })
    </script>
}
@section scripts{

    <script type="text/javascript">
        var table = null;
        function ReloadClientTable(data) {
            //debugger

                    //debugger
                    //ReloadClientTable(data.clients);
                    //$('#idTableClients').
                    if (table != null) {
                        //il y a des données  (table != null) &&
                        $('#idTableClients').DataTable().destroy();
                    }
                    //if (!table.emptyTable) table.destroy();
                    table = $('#idTableClients').DataTable({
                        data,
                        "columns": [
                            { "data": "id", "title": "id" },
                            { "data": "Nom", "title": "Nom" },
                            { "data": "Adresse", "title": "Adresse", "width": "40%" },
                            { "data": "FamilleName", "title": "Famille" },
                            //{ "data": "Tbl_Ville_id", "title": "Ville" },
                            { "data": "VilleName", "title": "Ville" },
                            //{ "data": "IDContact","title": "Contact" },
                            { "data": "ContactName", "title": "Contact" },
                            { "data": "Mail", "title": "Mail" },
                            { "data": "telephone1", "title": "Téléphone" },
                            //{ "title": "DatedeCreation" },
                            { "data": "Gsm", "title": "GSM" },
                            {
                                "data": "id",
                                "title": "Actions",
                                "width": "60%",
                                "orderable": false,
                                "class": "center",
                                "render": function (data, type, full, meta) {
                                    return "<a onclick='EditClients(" + data + ")'  style='width:40px' class='btn btn-success' ><i class='far fa-edit'></i></a><a onclick='Delete(" + data + ")' style= 'margin-left: 5px;width:40px' class='btn btn-danger'><i class='fas fa-trash-alt'></i></a><a  style= 'margin-left: 5px;width:40px' class='btn btn-outline-dark'><i class='fas fa-info'></i></a>";
                                }
                            }
                            //'" + row.id + "'
                        ],
                        "searching": true,
                        "scrollY": "300px",
                        "scrollX": true,
                        "scrollCollapse": true,
                        //"autoWidth": false,
                        //"colReorder": true,
                        "language": {
                            "info": "Afficher _END_ sur _TOTAL_ ",
                            "lengthMenu": "Afficher _MENU_ par page",
                            "paginate": {
                                "first": "Premier",
                                "last": "Dernier",
                                "next": "Suivant",
                                "previous": "Précédent"
                            },
                            //"emptyTabale": "Pas d'enregistrement trouvés",
                            "emptyTable": "Chargement des donnée en cours, veuillez patienter ....",
                            select: {
                                style: 'multi'
                            },
                        }
                   });

    }
    $(document).ready(function () {
       ////alert("ddddd");

        jQuery.extend(jQuery.validator.messages, {
            required: "votre message",
            remote: "votre message",
            email: "votre message",
            url: "votre message",
            date: "votre message",
            dateISO: "votre message",
            number: "votre message",
            digits: "votre message",
            creditcard: "votre message",
            equalTo: "votre message",
            accept: "votre message",
            maxlength: jQuery.validator.format("votre message {0} caractéres."),
            minlength: jQuery.validator.format("votre message {0} caractéres."),
            rangelength: jQuery.validator.format("votre message  entre {0} et {1} caractéres."),
            range: jQuery.validator.format("votre message  entre {0} et {1}."),
            max: jQuery.validator.format("votre message  inférieur ou égal à {0}."),
            min: jQuery.validator.format("votre message  supérieur ou égal à {0}.")
        });

        //jQuery.validator.addMethod(
        //    "regex",
        //    function (value, element, regexp) {
        //        if (regexp.constructor != RegExp)
        //            regexp = new RegExp(regexp);
        //        else if (regexp.global)
        //            regexp.lastIndex = 0;
        //        return this.optional(element) || regexp.test(value);
        //    }, "erreur expression reguliere"
        //);

        //debugger
            $.ajax({
                type: "Get",
                dataType: 'json',
                url: "/Clients/GetlisteClient",
                success: function (data) {
                   //debugger
                     ReloadClientTable(data.clients);
                }
            });
        //ReloadClientTable();
    });

        var urls = null;
        function SetActions(actions) {
            urls = actions;
        }
        function Delete(id) {
              if (confirm("Etes-vous sur de vouloir supprimer ce client")) {
                        $.ajax({
                            type: "Post",
                            dataType: 'json',
                            url: "@Url.Action("Delete", "Clients")/" + id,
                            success: function (data) {
                                if (data.IsDeleted) {
                                    //debugger
                                    //  table.ajax.reload();
                                        ReloadClientTable(data.clients);
                                    //ReloadClientTable();
                                        swal("Suppression effectuée avec succès !", "", "success");
                                     }
                            },
                            error: function (data) {
                                swal("Impossible d'effectué la supression !", "", "error");
                           }
                             });
              }
        }
        function EditClients(id) {
            //alert(id);
            //var url = $(this).data("url");
                $.ajax({
                type: "Get",
                dataType:'json',
                    url: "@Url.Action("Edit", "Clients")/" + id,

                        success: function (data) {
                        debugger
                            //$('#editClientModal').html(data.model); // This should be an empty div where you can inject your new html (the partial view)
                            var model = data.model;
                            $('#idIdClientEdit').val(model.id);
                            $('#idNomClientEdit').val(model.Nom);
                            $('#idAdresseClientEdit').val(model.Adresse);
                            $('#idMailClientEdit').val(model.Mail);
                            $('#idtelephone1ClientEdit').val(model.telephone1);
                            $('#idfaxClientEdit').val(model.fax);
                            $('#idCnssClientEdit').val(model.Cnss);
                            $('#ididfClientEdit').val(model.idf);
                            $('#idIceClientEdit').val(model.Ice);
                            $('#idGsmClientEdit').val(model.Gsm);
                            //affiche le modal
                            //pour ne pas afficher les messages au chargement du modal
                            var $el = $('#editClientModal');
                            $el.data('validator', null);
                            $.validator.unobtrusive.parse($el);

                            $('#editClientModal').modal({
                            autoOpen: true,
                            height: 550,
                            width: 700,
                            resizable: false,
                            title: 'Modifier le  client',
                            close: function () {
                                alert("close");
                                $("#editClientModal").hide();
                                //Popup.dialog('destory').remove();
                            }
                            });

                    }
                });

        }
        function SaveEditClients() {
            //alert("save");
            debugger
            jQuery.extend(jQuery.validator.messages, {

                required: "votre message",
                remote: "votre message",
                email: "votre message",
                url: "votre message",
                date: "votre message",
                dateISO: "votre message",
                number: "votre message",
                digits: "votre message",
                creditcard: "votre message",
                equalTo: "votre message",
                accept: "votre message",
                maxlength: jQuery.validator.format("votre message {0} caractéres."),
                minlength: jQuery.validator.format("votre message {0} caractéres."),
                rangelength: jQuery.validator.format("votre message  entre {0} et {1} caractéres."),
                range: jQuery.validator.format("votre message  entre {0} et {1}."),
                max: jQuery.validator.format("votre message  inférieur ou égal à {0}."),
                min: jQuery.validator.format("votre message  supérieur ou égal à {0}.")
            });

            jQuery("#editClientForm").validate({
                rules: {
                    "NomClientEdit": {
                        "required": false,
                        "minlength": 2,
                        "maxlength": 4
                    }
                    //,"idMailClientEdit": {
                    //    "email": true,
                    //    "maxlength": 255
                    //},
                    //"idAdresseClientEdit": {
                    //    "required": true
                    //},
                    //"idtelephone1ClientEdit": {
                    //    "required": true,
                    //    "regex": /^(\+33\.|0)[0-9]{9}$/
                    //}

                }
            });
            var id =  $("#idIdClientEdit").val();
            var nom = $("#idNomClientEdit").val();
            var Adresse = $("#idAdresseClientEdit").val();
            var IdFamille = $("#idIdFamilleClientEdit").val();
            var Tbl_Ville_id = $("#idIdVilleClientEdit").val();
            var IDContact = $("#idIDContactClientEdit").val();
            var Mail = $("#idMailClientEdit").val();
            var telephone1 = $("#idtelephone1ClientEdit").val();
            var Gsm = $("#idGsmClientEdit").val();

            let dataObject = JSON.stringify({
                'Id':id,
                'Nom': nom,
                'Adresse': Adresse,
                'Tbl_Famille_Clt_Id': IdFamille,
                'Tbl_Ville_id': Tbl_Ville_id,
                'IDContact': IDContact,
                'Mail': Mail,
                'telephone1': telephone1,
                'Gsm': Gsm,
            });
            if ($("#editClientForm").valid()) {
                debugger
                //var url = $(this).data("url");
                    $.ajax({
                        type: "Post",
                        dataType: 'json',
                        data: dataObject,
                        url: "@Url.Action("Edit", "Clients")",
                        contentType: 'application/json; charset=utf-8',

                        success: function (data) {

                            if (data.IsUpdate) {

                                var list = data.clients;
                                $("#editClientModal").hide();
                                ReloadClientTable(list);
                                //ReloadClientTable();
                                swal("Modification effectuée avec succès !", "", "success");
                            }
                            if (!data.IsUpdate) {
                                swal("Échec du Sauvegarde !", "", "error");
                            }

                        },

                        error: function (data) {
                            alert("response");
                            console.log(data);
                            //swal("Échec du Sauvegarde !", "", "error");
                        }

                        });
            }
        }
        function AddClient() {
            alert("AddClient");

            $("#idNomClient").val("");
            $("#idAdresseClient").val("");

            $("#idMailClient").val();
            $("#idtelephone1Client").val("");
            $("#idGsmClient").val("");

            $.ajax({
                type: "Get",
                dataType: 'json',
                url: '/Clients/Create',
                //data: dataObject,
                contentType: 'application/json; charset=utf-8',

                success: function (res) {
                    //debugger
                    if (res != null && res != false) {
                        $("#addClientModal").modal({
                            autoOpen: true,
                            height: 550,
                            width: 700,
                            resizable: false,
                            title: 'Fiche client',
                            close: function () {
                                alert("close");
                                $("#addClientModal").hide();
                                //Popup.dialog('destory').remove();
                            }
                        });
                        $("#addClientModal").show();
                    }
                }
            });
         //$("#addClientModal").modal();
        }

        function SaveAddClient() {
            //debugger
            //var id = res;
            var nom = $("#idNomClient").val();
            var Adresse = $("#idAdresseClient").val();
            var IdFamille = $("#idIdFamilleClient").val();
            var Tbl_Ville_id = $("#idIdVilleClient").val();
            var IDContact = $("#idIDContactClient").val();
            var Mail = $("#idMailClient").val();
            var telephone1 = $("#idtelephone1Client").val();
            var Gsm = $("#idGsmClient").val();


            let dataObject = JSON.stringify({
                //'Id':id,
                'Nom': nom,
                'Adresse': Adresse,
                'Tbl_Famille_Clt_Id': IdFamille,
                'Tbl_Ville_id': Tbl_Ville_id,
                'IDContact': IDContact,
                'Mail': Mail,
                'telephone1': telephone1,
                'Gsm': Gsm,
            });
            var data = 1;
            //Send the JSON array to Controller using AJAX.
            if ($("#addClientForm").valid()) {
                    $.ajax({
                        type: "POST",
                        dataType: 'json',
                        url: '/Clients/Create',
                        data: dataObject,
                        contentType: 'application/json; charset=utf-8',
                        success: function (res) {
                            if (res != null && res != false) {
                                //alert("res");
                                // window.location.href = urls.GetFonds;
                                //on doit vider les inputs
                                $("#idNomClient").val("");
                                $("#idAdresseClient").val("");
                                //$("#idIdFamilleClient").val("");
                                //$("#idIdVilleClient").val("");
                                //$("#idIDContactClient").val("");
                                $("#idMailClient").val("");
                                $("#idtelephone1Client").val("");
                                $("#idGsmClient").val("");
                                $("#addClientModal").hide();
                                // debugger

                                ReloadClientTable(res);
                                //ReloadClientTable();
                                swal("Enregistrement effectué avec succès !", "", "success");
                            }
                        },
                        error: function (res) {
                            //alert(response);
                            console.log(res);
                            swal("Échec du Sauvegarde !", "", "error");
                        }
                    });
        }
        }
    //SaveClient
    </script>
}







@*EmpVar.DOB = Convert.ToDateTime(Rows.DOB).ToShortDateString();

    EmpVar.MobileNo =Convert.ToInt16(Rows.MobileNo);

    EmpVar.Age = Convert.ToInt16(Rows.Age);

    EmpVar.EmailId = Rows.EmailId;*@
